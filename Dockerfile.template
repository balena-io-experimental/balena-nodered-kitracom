# base-image for node on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-node:6.9.1-20161206

# Install apt dependencies
RUN apt-get update && apt-get install -y \
  dnsmasq \
  hostapd \
  iproute2 \
  iw \
  python-dev \
  python-pip \
  libdbus-1-dev \
  libexpat-dev \
  rfkill \
  bluetooth \
  bluez \
  libbluetooth-dev \
  libudev-dev \
  libglib2.0-dev \
  libdbus-1-dev \
  libusb-dev \
  libical-dev \
  libreadline-dev \
  libical-dev \
  && rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && pip install pexpect

# Defines our working directory in container
RUN mkdir -p /usr/src/app/
WORKDIR /usr/src/app

RUN wget https://www.kernel.org/pub/linux/bluetooth/bluez-5.43.tar.xz \
    && tar xvf bluez-5.43.tar.xz

WORKDIR /usr/src/app/bluez-5.43
RUN ./configure --enable-library \
    && make -j8 && sudo make install \
    && cp attrib/gatttool /usr/local/bin/
WORKDIR /usr/src/app/

# Copies the package.json first for better cache on later pushes
COPY ./app/package.json ./

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm install -g node-red && \
  npm install -g node-red-contrib-kitra install node-red-contrib-artik node-red-contrib-artik-cloud node-red-contrib-resinio && \
  npm cache clean && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY ./app ./

# Enable systemd init system in container
ENV INITSYSTEM=on

# server.js will run when container starts up on the device
CMD ["bash", "/usr/src/app/start.sh"]
